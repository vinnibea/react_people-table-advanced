{"version":3,"sources":["components/PeoplePage.tsx","components/Navigation.tsx","components/api.tsx","components/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["SortBy","Navigation","className","to","isActive","PeopleTable","location","useLocation","navigate","useNavigate","searchParams","URLSearchParams","search","useState","peopleList","getPeople","query","getQuery","default","sortingType","setSortingType","isReversed","setReversed","preparedPeopleList","useMemo","filteredList","filter","person","name","fatherName","motherName","checkedValues","forEach","value","push","some","toLowerCase","includes","toLocaleLowerCase","searchIncudings","get","arrayOfPeople","sortType","sort","personOne","personTwo","localeCompare","sex","born","died","sortPeople","handleSortType","sortby","set","String","delete","toString","useEffect","setTimeout","fetch","then","response","json","people","reverse","type","onChange","event","target","length","placeholder","title","icon","faArrowUp","onClick","faArrowDown","map","personName","selectedPersonClasses","classnames","pathname","replace","split","slice","join","fatherInList","find","motherInList","style","backgroundColor","slug","color","NotFoundPage","App","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.93d03cb6.chunk.js","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { Loader } from 'react-bulma-components';\nimport classnames from 'classnames';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowDown, faArrowUp } from '@fortawesome/free-solid-svg-icons';\nimport { getUsers } from './api';\n\ninterface People {\n  name: string,\n  sex: string,\n  born: number,\n  died: number,\n  fatherName: string,\n  motherName: string,\n  slug: string,\n}\n\nenum SortBy {\n  sex = 'sex',\n  name = 'name',\n  born = 'born',\n  died = 'died',\n  default = 'default',\n}\n\nconst sortPeople = (\n  arrayOfPeople: People[] | [],\n  sortType: SortBy | string,\n) => {\n  switch (sortType) {\n    case SortBy.name:\n      return arrayOfPeople\n        .sort((personOne, personTwo) => personOne.name\n          .localeCompare(personTwo.name));\n\n    case SortBy.sex:\n      return arrayOfPeople\n        .sort((personOne, personTwo) => personOne.sex\n          .localeCompare(personTwo.sex));\n\n    case SortBy.born:\n      return arrayOfPeople\n        .sort((personOne, personTwo) => personOne.born - personTwo.born);\n\n    case SortBy.died:\n      return arrayOfPeople\n        .sort((personOne, personTwo) => personOne.died - personTwo.died);\n\n    default:\n      return arrayOfPeople;\n  }\n};\n\nfunction searchIncudings(\n  {\n    name,\n    fatherName,\n    motherName,\n  }: People,\n  query: string,\n): boolean {\n  const checkedValues: string[] = [];\n  const inputValues = [name, fatherName, motherName];\n\n  inputValues.forEach(value => {\n    if (typeof value === 'string') {\n      checkedValues.push(value);\n    }\n  });\n  const findIncludings = checkedValues.some(value => {\n    return value\n      .toLowerCase()\n      .includes(query.toLocaleLowerCase());\n  });\n\n  return findIncludings;\n}\n\nexport const PeopleTable: React.FC = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  const searchParams = new URLSearchParams(location.search);\n  const [peopleList, getPeople] = useState<People[] | null>(null);\n  const [query, getQuery] = useState('');\n  const [sortingType, setSortingType] = useState<SortBy>(SortBy.default);\n  const [isReversed, setReversed] = useState(true);\n  const preparedPeopleList: People[] = useMemo(() => {\n    const filteredList = peopleList?.filter(person => {\n      const queryForSearch = searchParams.get('query') || '';\n\n      return searchIncudings(person, queryForSearch);\n    }) || [];\n\n    if (sortingType !== SortBy.default) {\n      const sortTypeFromUrl = searchParams.get('sortBy') || sortingType;\n\n      return sortPeople(filteredList, sortTypeFromUrl) || [];\n    }\n\n    return filteredList || [];\n  }, [peopleList, query, sortingType, isReversed]);\n\n  const handleQueryChange = (queryfromInput: string) => {\n    if (queryfromInput.length) {\n      searchParams.set('query', query);\n    } else {\n      searchParams.delete('query');\n    }\n\n    navigate(`?${searchParams.toString()}`);\n  };\n\n  const handleSortType = (sortby: string) => {\n    if (sortingType !== SortBy.default) {\n      searchParams.set('sortBy', String(sortby));\n    } else {\n      searchParams.delete('sortBy');\n    }\n\n    navigate(`?${searchParams.toString()}`);\n  };\n\n  const findUser = (personName: string) => {\n    return location.pathname\n      .replace(/[0-9]/gi, '')\n      .replace('/table/', '')\n      .split('-')\n      .slice(0, -1)\n      .join(' ') === personName.toLowerCase();\n  };\n\n  useEffect(() => {\n    setTimeout(() => getUsers()\n      .then(people => {\n        getPeople(people);\n      }), 1000);\n  }, []);\n\n  if (!isReversed) {\n    preparedPeopleList.reverse();\n  }\n\n  return (\n    <>\n      <div className=\"table-container\">\n        <input\n          type=\"text\"\n          className=\"input is-medium\"\n          value={query}\n          onChange={(event) => {\n            handleQueryChange(event.target.value);\n            getQuery(event.target.value);\n          }}\n          placeholder=\"Enter person name\"\n        />\n        <table className=\"table is-hoverable\">\n          <thead>\n            <tr>\n              <th>\n                <abbr title=\"name\">Name</abbr>\n\n                <div className=\"arrows\">\n                  <FontAwesomeIcon\n                    icon={faArrowUp}\n                    onClick={() => {\n                      setReversed(true);\n                      handleSortType(SortBy.name);\n                      setSortingType(SortBy.name);\n                    }}\n                  />\n                  <FontAwesomeIcon\n                    icon={faArrowDown}\n                    onClick={() => {\n                      setReversed(false);\n                      handleSortType(SortBy.name);\n                      setSortingType(SortBy.name);\n                    }}\n                  />\n                </div>\n              </th>\n              <th>\n                <abbr title=\"sex\">Sex</abbr>\n\n                <div className=\"arrows\">\n                  <FontAwesomeIcon\n                    icon={faArrowUp}\n                    onClick={() => {\n                      setReversed(true);\n                      handleSortType(SortBy.sex);\n                      setSortingType(SortBy.sex);\n                    }}\n                  />\n                  <FontAwesomeIcon\n                    icon={faArrowDown}\n                    onClick={() => {\n                      setReversed(false);\n                      handleSortType(SortBy.sex);\n                      setSortingType(SortBy.sex);\n                    }}\n                  />\n                </div>\n              </th>\n\n              <th>\n                <abbr title=\"born\">Born</abbr>\n                <div className=\"arrows\">\n                  <FontAwesomeIcon\n                    icon={faArrowUp}\n                    onClick={() => {\n                      setReversed(true);\n                      handleSortType(SortBy.born);\n                      setSortingType(SortBy.born);\n                    }}\n                  />\n                  <FontAwesomeIcon\n                    icon={faArrowDown}\n                    onClick={() => {\n                      setReversed(false);\n                      handleSortType(SortBy.born);\n                      setSortingType(SortBy.born);\n                    }}\n                  />\n                </div>\n              </th>\n              <th>\n                <abbr title=\"died\">Died</abbr>\n                <div className=\"arrows\">\n                  <FontAwesomeIcon\n                    icon={faArrowUp}\n                    onClick={() => {\n                      setReversed(true);\n                      handleSortType(SortBy.died);\n                      setSortingType(SortBy.died);\n                    }}\n                  />\n\n                  <FontAwesomeIcon\n                    icon={faArrowDown}\n                    onClick={() => {\n                      setReversed(!isReversed);\n                      handleSortType(SortBy.died);\n                      setSortingType(SortBy.died);\n                    }}\n                  />\n\n                </div>\n              </th>\n              <th><abbr title=\"Fathername\">Fathername</abbr></th>\n\n              <th><abbr title=\"Mothername\">Mothername</abbr></th>\n            </tr>\n          </thead>\n\n          {preparedPeopleList.length\n\n            ? (\n              <tbody>\n                {preparedPeopleList.map(person => {\n                  const selectedPersonClasses = classnames({\n                    'is-selected': findUser(person.name),\n                  });\n                  const fatherInList = preparedPeopleList\n                    .find(people => person.fatherName === people.name);\n\n                  const motherInList = preparedPeopleList\n                    .find(people => person.motherName === people.name);\n\n                  return (\n                    <tr\n                      key={person.slug}\n                      className={selectedPersonClasses}\n                    >\n                      <th\n                        style={\n                          {\n                            backgroundColor:\n                              SortBy.name === searchParams.get('sortBy')\n                                ? 'lightblue'\n                                : '',\n                          }\n                        }\n                      >\n                        <Link\n                          to={{\n                            pathname: `${person.slug}`,\n                            search: location.search,\n                          }}\n                          style={{\n                            color: person.sex === 'f'\n                              ? 'rgb(255, 0, 0)'\n                              : 'rgb(0, 71, 171)',\n                          }}\n                        >\n                          {person.name}\n                        </Link>\n                      </th>\n                      <th\n                        style={\n                          {\n                            backgroundColor:\n                              SortBy.sex === searchParams.get('sortBy')\n                                ? 'lightblue'\n                                : '',\n                          }\n                        }\n                      >\n                        {person.sex}\n                      </th>\n\n                      <th\n                        style={\n                          {\n                            backgroundColor:\n                              SortBy.born === searchParams.get('sortBy')\n                                ? 'lightblue'\n                                : '',\n                          }\n                        }\n                      >\n                        {person.born}\n                      </th>\n\n                      <th\n                        style={\n                          {\n                            backgroundColor:\n                              SortBy.died === searchParams.get('sortBy')\n                                ? 'lightblue'\n                                : '',\n                          }\n                        }\n                      >\n                        {person.died}\n                      </th>\n\n                      <th>\n                        {fatherInList\n                          ? (\n                            <Link to={{\n                              pathname: `${fatherInList.slug}`,\n                              search: location.search,\n                            }}\n                            >\n                              {person.fatherName}\n                            </Link>\n                          )\n                          : <>{person.fatherName}</>}\n                      </th>\n\n                      <th>\n                        {motherInList\n                          ? (\n                            <Link to={{\n                              pathname: `${motherInList.slug}`,\n                              search: location.search,\n                            }}\n                            >\n                              {person.motherName}\n                            </Link>\n                          )\n                          : <>{person.motherName}</>}\n                      </th>\n                    </tr>\n                  );\n                })}\n              </tbody>\n\n            )\n            : <Loader />}\n        </table>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport 'bulma/css/bulma.min.css';\nimport { Button } from 'react-bulma-components';\n\nexport const Navigation: React.FC = () => {\n  return (\n    <nav className=\"App__nav\">\n      <NavLink\n        to=\"/home\"\n        className={({ isActive }) => (isActive ? 'is-active' : '')}\n      >\n        <Button>Home</Button>\n      </NavLink>\n\n      <NavLink to=\"/table\">\n        <Button>People</Button>\n      </NavLink>\n    </nav>\n  );\n};\n","const BASE_URL = 'https://mate-academy.github.io/react_people-table/api/';\n\nexport const getUsers = () => {\n  return fetch(`${BASE_URL}/people.json`)\n    .then(response => response.json());\n};\n","export const NotFoundPage: React.FC = () => {\n  return (\n    <div className=\"App__not-found\">\n      <p className=\"App__not-text\">Page Not Found</p>\n    </div>\n  );\n};\n","import './App.scss';\nimport {\n  Route,\n  Routes,\n  Navigate,\n} from 'react-router-dom';\nimport { Navigation } from './components/Navigation';\nimport { PeopleTable } from './components/PeoplePage';\nimport { NotFoundPage } from './components/NotFoundPage';\n\nconst App = () => (\n  <div className=\"App\">\n    <Navigation />\n\n    <Routes>\n      <Route\n        path=\"/\"\n        element={<h1>Home</h1>}\n      />\n\n      <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n\n      <Route\n        path=\"/table\"\n        element={<PeopleTable />}\n      >\n\n        <Route path=\":slug\" element={<PeopleTable />} />\n      </Route>\n\n      <Route path=\"*\" element={<NotFoundPage />} />\n    </Routes>\n  </div>\n);\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}